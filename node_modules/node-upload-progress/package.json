{
  "name": "node-upload-progress",
  "version": "0.0.1",
  "description": "It's a Node.js module to handle upload and upload-progress",
  "keywords": [
    "upload",
    "progress"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/phstc/node-upload-progress"
  },
  "author": {
    "name": "Pablo Cantero",
    "email": "pablo@pablocantero.com"
  },
  "dependencies": {
    "formidable": "1.0.9"
  },
  "devDependencies": {
    "mocha": "1.0.1",
    "should": "0.6.0",
    "coffee-script": "1.2.0",
    "superagent": "0.5.0"
  },
  "main": "./index.js",
  "scripts": {},
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "It's a Node.js module to handle upload and upload-progress.\n\n##Instal\n\n    $ npm install node-upload-progress\n\nor\n\n    # package.json\n    # ...\n    \"dependencies\": {\n      \"node-upload-progress\": \"latest\"\n    }\n    # ...\n    \n    $ npm install\n\n##Usage\n\n###Simple\n\n    var app = require('http');\n    var uploadProgress = require('node-upload-progress');\n    \n    uploadHandler = new uploadProgress.UploadHandler;\n\nThe ```uploadHandler.uploadDir``` is the path where the files will be saved. Without this configuration the files will be saved in a path based on ```process.env.TMP```.\n\n    uploadHandler.configure(function() {\n      this.uploadDir = __dirname + '/uploads';\n    });\n    \n    app.createServer(function(req, res) {\n      if (req.url === '/upload') {\n        uploadHandler.upload(req, res);\n        return;\n      }\n      # ...\n    }\n\n####Custom response body\n\nConfiguring the ```uploadHandler.onEnd = customOnEndHandler```, you can write your own response body.\n\n    # ...\n    uploadHandler.configure(function() {\n      this.uploadDir = \"\" + __dirname + \"/uploads\";\n      this.onEnd = customOnEndHandler;\n    });\n    \n    function customOnEndHandler(req, res){      \n      res.writeHead 200, {'Content-Type': 'text/plain'}\n      res.end('Upload received');\n    }\n    \n    app.createServer(function(req, res) {\n      if (req.url === '/upload') {\n        uploadHandler.upload(req, res);\n        return;\n      }\n      # ...\n    }\n\nSee a full example at [examples/simple](https://github.com/phstc/node-upload-progress/tree/master/examples/simple).\n\n##Progress\n\nIf you want to use an upload progress similar to [Nginx Upload Progress Module](http://wiki.nginx.org/HttpUploadProgressModule), you can easily do it using the progress handler.\n\n    # ...\n    app.createServer(function(req, res) {\n      if (req.url.match(/\\/upload\\?X\\-Progress\\-ID=.+/)) {\n        uploadHandler.upload(req, res);\n        return;\n      } else if (req.url.match(/\\/progress\\?X\\-Progress\\-ID=.+/)) {\n        uploadHandler.progress(req, res);\n        return;\n      }\n      # ...\n    }\n\n###The view\n\n#### The Javascript\n\n    <script>\n    \t$(function(){\n    \t\t$('#form_upload').submit(function(){\n    \t\t\tvar xProgressID = guidGenerator();\n    \t\t\t$(this).attr('action', '/upload?X-Progress-ID=' + xProgressID);\n    \t\t\tvar uploadIntervalID = setInterval(function(){\n    \t\t\t\t$.get('/progress?X-Progress-ID=' + xProgressID, function(data){\n    \t\t\t\t\tif(data.status === 'done'){\n    \t\t\t\t\t\tclearInterval(uploadIntervalID);\n    \t\t\t\t\t}\n    \t\t\t\t\tupdateViewUploadStatus(data);\n    \t\t\t\t}).error(function(){clearInterval(uploadIntervalID)});\n    \t\t\t}, 250);\n    \t\t\treturn true;\n    \t\t});\n    \t\t\n    \t\tfunction updateViewUploadStatus(data){\n    \t\t\t# ...\n    \t\t}\n    \t\t\n    \t\t// http://stackoverflow.com/a/105074/464685\n    \t\tfunction guidGenerator() {\n    \t\t\treturn (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n    \t\t}\n    \t\t\n    \t\tfunction S4() {\n    \t\t\treturn (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n    \t\t}\n    \t});\n    </script>\n\n####The HTML\n\n    # ...\n    <form action=\"/upload?X-Progress-ID=1\" enctype=\"multipart/form-data\" method=\"post\" id=\"form_upload\" target=\"iframe_upload\">\n    \t<p>\n    \t\t<label>File</label><br/>\n    \t\t<input type=\"file\" name=\"upload\" id=\"upload\"><br>\n    \t</p>\n    \t<p>\n    \t\t<input type=\"submit\" value=\"Upload\">\n    \t</p>\n    </form>\n    <iframe id=\"iframe_upload\" name=\"iframe_upload\"></iframe>\n    # ...\n\n###The progress status\n\nThe upload request hasn't been registered yet or is unknown:\n\n    HTTP 404 Not Found\n\nThe upload request has ended:\n\n    {\"bytesReceived\":N,\"bytesExpected\":N,\"percent\":100,\"status\":\"done\",\"fileName\":\"filename.txt\",\"filePath\":\"uploadDir/filename.txt\"}\n\nThe upload request is in progress:\n\n    {\"bytesReceived\":N,\"bytesExpected\":N,\"percent\":N,\"status\":\"uploading\"}\n\nSee a full example at [examples/progress](https://github.com/phstc/node-upload-progress/tree/master/examples/progress).\n\n##Running it\n\n###Simple example\n\n    $ make simple\n\nThen \n\n    open http://localhost:8080\n\n###Progress example\n\n    $ make progress\n\nThen \n\n    open http://localhost:8080\n\n###Test suite\n\n    $ make test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/phstc/node-upload-progress/issues"
  },
  "_id": "node-upload-progress@0.0.1",
  "_from": "node-upload-progress@*"
}
